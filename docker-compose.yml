# Docker Compose for Personal Website
# Provides easy deployment with nginx reverse proxy and Let's Encrypt support

version: '3.8'

services:
  # Your Rust web application
  website:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/arm64  # Raspberry Pi 5 architecture
    container_name: personal_website
    restart: unless-stopped
    
    # Environment variables
    environment:
      - DATABASE_URL=sqlite:/app/data/portfolio.db
      - HOST=0.0.0.0
      - PORT=8080
      - RUST_LOG=info,personal_website=debug
    
    # Volume mounts for persistence
    volumes:
      - website_data:/app/data  # SQLite database persistence
      - ./migrations:/app/migrations:ro  # Read-only migrations
    
    # Network - only expose to nginx, not directly to host
    networks:
      - web_network
    
    # Health check
    healthcheck:
      test: ["CMD", "sqlite3", "/app/data/portfolio.db", "SELECT 1;"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    restart: unless-stopped
    
    # Expose HTTP and HTTPS to host
    ports:
      - "80:80"
      - "443:443"
    
    # Configuration and SSL certificates
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./static:/var/www/static:ro  # Serve static files directly
      - certbot_certs:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
    
    networks:
      - web_network
    
    depends_on:
      - website

  # Let's Encrypt certificate management
  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    
    # Only run when needed (not a long-running service)
    profiles:
      - ssl-init
      - ssl-renew
    
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    
    # Command for initial certificate (override as needed)
    command: >
      certonly --webroot --webroot-path=/var/www/certbot
      --email your-email@example.com --agree-tos --no-eff-email
      --force-renewal -d your-domain.com

# Persistent volumes
volumes:
  website_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/personal_website/data
  
  certbot_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /etc/letsencrypt
  
  certbot_www:
    driver: local

# Network for container communication
networks:
  web_network:
    driver: bridge